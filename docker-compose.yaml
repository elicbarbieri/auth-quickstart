version: '3.8'

services:
  # PostgreSQL for Authentik
  postgresql:
    image: postgres:14-alpine
    restart: unless-stopped
    volumes:
      - authentik-db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}

  # Redis for Authentik
  redis:
    image: redis:alpine
    command: --save 60 1
    restart: unless-stopped
    volumes:
      - authentik-redis:/data

  # Authentik Server
  authentik-server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.4}
    restart: unless-stopped
    command: server
    volumes:
      - authentik-media:/media
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_BOOTSTRAP_TOKEN: ${AUTHENTIK_BOOTSTRAP_TOKEN}
    ports:
      - "9000:9000"
    depends_on:
      - postgresql
      - redis

  # Authentik Worker
  authentik-worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.4}
    restart: unless-stopped
    command: worker
    volumes:
      - authentik-media:/media
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_BOOTSTRAP_TOKEN: ${AUTHENTIK_BOOTSTRAP_TOKEN}
    depends_on:
      - postgresql
      - redis
      - authentik-server

  # Caddy as reverse proxy
  caddy:
    image: caddy:2
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    environment:
      BASE_DOMAIN: ${BASE_DOMAIN}
    depends_on:
      - authentik-server

  # Init script with inline Dockerfile to automate OAuth client creation
  init-script:
    build:
      dockerfile_inline: |
        FROM python:3.11-slim
        RUN pip install --no-cache-dir requests
        COPY init.py /app/init.py
        WORKDIR /app
        CMD ["python", "init.py"]
    environment:
      AUTHENTIK_URL: http://authentik-server:9000
      AUTHENTIK_BOOTSTRAP_TOKEN: ${AUTHENTIK_BOOTSTRAP_TOKEN}
      BASE_DOMAIN: ${BASE_DOMAIN}
      CADDY_CONFIG_PATH: /caddy-config
    volumes:
      - ./init.py:/app/init.py
      - ./caddy_config:/caddy-config
    depends_on:
      - authentik-server

volumes:
  authentik-db:
  authentik-redis:
  authentik-media:
  caddy_data:
  caddy_config: